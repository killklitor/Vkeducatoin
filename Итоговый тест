from typing import List
from collections import defaultdict
from heapq import heappush, heappop

class Twitter:
    def __init__(self):
        self.tweets = defaultdict(list)  # user_id -> [(time, tweet_id)]
        self.follows = defaultdict(set)  # user_id -> {followee_ids}
        self.time = 0  # global timestamp

    def post_tweet(self, user_id, tweet_id):
        self.tweets[user_id].append((self.time, tweet_id))
        self.time += 1

    def get_news_feed(self, user_id) -> List[int]:
        heap = []
        for followee_id in self.follows[user_id]:
            for tweet in self.tweets[followee_id]:
                heappush(heap, (-tweet[0], tweet[1]))
        for tweet in self.tweets[user_id]:
            heappush(heap, (-tweet[0], tweet[1]))

        feed = []
        for _ in range(min(10, len(heap))):
            feed.append(heappop(heap)[1])
        return feed

    def follow(self, follower_id, followee_id):
        self.follows[follower_id].add(followee_id)

    def unfollow(self, follower_id, followee_id):
        if followee_id in self.follows[follower_id]:
            self.follows[follower_id].remove(followee_id)
